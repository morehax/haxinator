#!/bin/bash

FILE_PATH="/update_me.sh"
if [ -f "$FILE_PATH" ]; then
    chmod +x "$FILE_PATH"
    ./"$FILE_PATH"
else
    echo "rc.local - Not a first run"
fi

###############################################################################
# 1. Universal OTG Gadget Serial and Ethernet
###############################################################################

#modprobe dwc2          # OTG controller
#modprobe libcomposite  # USB gadget framework   (built-in is OK – this is no-op)

# ConfigFS is usually auto-mounted.  Mount again only if it isn’t:
#if ! mountpoint -q /sys/kernel/config; then
#    echo "[rc.local] Mounting configfs …"
#    modprobe configfs
#    mount -t configfs none /sys/kernel/config
#fi

###############################################################################
# 2. Unload any legacy gadget (g_cdc, g_multi, …) so we own the UDC
###############################################################################
#for m in g_cdc g_multi g_serial usb_f_ecm usb_f_rndis usb_f_acm u_ether; do
#    modprobe -r "$m" 2>/dev/null || true
#done

###############################################################################
# 3. Create the composite gadget if it does not already exist
###############################################################################
#G=/sys/kernel/config/usb_gadget/pi

#if [ ! -d "$G" ]; then
#    echo "[rc.local] Creating gadget directory …"
#    mkdir -p "$G"
#
#    # ---- Device descriptor --------------------------------------------------
#    echo 0x1d6b >"$G/idVendor"    # Linux Foundation
#    echo 0x0104 >"$G/idProduct"   # Multifunction Composite Gadget
#    echo 0x0200 >"$G/bcdUSB"      # USB-2.0
#
#    mkdir -p "$G/strings/0x409"
#    echo "0123456789ABCDEF"        >"$G/strings/0x409/serialnumber"
#    echo "Raspberry Pi Foundation" >"$G/strings/0x409/manufacturer"
#    echo "Pi Serial + Ethernet"    >"$G/strings/0x409/product"
#
#    # ---- Configuration ------------------------------------------------------
#    mkdir -p "$G/configs/c.1" "$G/configs/c.1/strings/0x409"
#    echo 120                               >"$G/configs/c.1/MaxPower"      # mA
#    echo "CDC ECM + ACM"                   >"$G/configs/c.1/strings/0x409/configuration"
#
#    # ---- Functions ----------------------------------------------------------
#    mkdir -p "$G/functions/acm.usb0"       # Serial (ttyACM)
#    mkdir -p "$G/functions/ecm.usb0"       # Ethernet (Linux/macOS; use rndis.usb0 for Windows)
#
#    # Nice, deterministic MAC addresses (must be locally-administered 02:xx:xx:xx:xx:xx)
#    echo 02:23:45:67:89:ab >"$G/functions/ecm.usb0/dev_addr"   # device side
#    echo 02:99:88:77:66:55 >"$G/functions/ecm.usb0/host_addr"  # host side

    # Link functions into configuration
#    ln -s "$G/functions/acm.usb0" "$G/configs/c.1/"
#    ln -s "$G/functions/ecm.usb0" "$G/configs/c.1/"

    # ---- Enable the gadget --------------------------------------------------
#    UDC=$(ls /sys/class/udc | head -n1)
#    echo "[rc.local] Binding to UDC: $UDC"
#    echo "$UDC" >"$G/UDC"
#else
#    echo "[rc.local] Gadget already exists – skipping creation."
#fi


sysctl -w net.ipv4.ip_forward=1

# Check if usb0 connection exists
if ! nmcli con show | grep -q "usb0"; then
    nmcli device set usb0 managed yes
    nmcli con add type ethernet ifname usb0 con-name usb0 ip4 192.168.8.1/24
    nmcli con mod usb0 ipv4.method shared
    nmcli con up usb0
else
    nmcli con up usb0
fi

exit 0
