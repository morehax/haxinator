# yamllint disable-line rule:document-start
name: RPi image builder

permissions:
  contents: write
  actions: read

env:
  IMAGE_NAME: haxinator-builder

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - .devcontainer/**
      - .chglog/**
      - .github/dependabot.yml
      - .github/workflows/update-changelog.yml
      - docs/**
      - README.md

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

# TODO:
# - Use super-linter/super-linter
# - Use cache for buildx to speed up builds
# - Check if building on Mac is faster
# - Try checkov
# - Get and upload SARIF
# - Build docs in parallel with building the image to give in assets
# - Create sha256sum of the files if not already created

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      contents: read
      security-events: write
    steps:
      -
        name: Git Checkout
        uses: actions/checkout@v4
      -
        name: Run checkov (Dockerfile)
        continue-on-error: true
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli,sarif
          output_file_path: console,checkov.sarif
      -
        name: Upload Checkov SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('checkov.sarif') != '' }}
        with:
          sarif_file: checkov.sarif
      -
        name: Run ShellCheck Analysis
        uses: ludeeus/action-shellcheck@master
      -
        name: Shellcheck -> SARIF
        uses: reactive-firewall/shellcheck-scan@v1
        with:
          severity: 'warning'
      -
        name: Upload Shellcheck SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('flake8-report.sarif') != '' }}
        with:
          sarif_file: shellcheck.sarif
      -
        name: Lint markdown files
        continue-on-error: true
        uses: articulate/actions-markdownlint@v1
      -
        name: Lint php files
        run: |
          find . -name "*.php" -exec php -l {} \;
      -
        name: Lint python scripts
        continue-on-error: true
        shell: bash
        run: |
          # 1. Install everything against built-in Python
          python3 -m pip install --upgrade pip
          python3 -m pip install \
            flake8 flake8-sarif \
            pylint lintrunner-adapters \
            bandit bandit-sarif

          # 2. Flake8
          echo "⎯⎯⎯ Flake8: console output ⎯⎯⎯"
          flake8 .

          echo "⎯⎯⎯ Flake8: exporting SARIF ⎯⎯⎯"
          flake8 . --format=sarif --output-file=flake8-report.sarif

          # 3. Pylint
          echo "⎯⎯⎯ Pylint: console output ⎯⎯⎯"
          pylint **/*.py

          echo "⎯⎯⎯ Pylint: exporting SARIF ⎯⎯⎯"
          pylint --recursive=y **/*.py --output-format=json > pylint-report.json
          python3 -m lintrunner_adapters to-sarif \
            pylint-report.json pylint-report.sarif

          # 4. Bandit
          echo "⎯⎯⎯ Bandit: console output ⎯⎯⎯"
          bandit -r .

          echo "⎯⎯⎯ Bandit: exporting SARIF ⎯⎯⎯"
          bandit -r . --format=sarif --output-file=bandit-report.sarif

      -
        name: Upload Flake8 SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('flake8-report.sarif') != '' }}
        with:
          sarif_file: flake8-report.sarif
      -
        name: Upload pylint SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('pylint-report.sarif') != '' }}
        with:
          sarif_file: pylint-report.sarif
      -
        name: Upload Bandit SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('bandit-report.sarif') != '' }}
        with:
          sarif_file: bandit-report.sarif

  docker-image-builder:
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 10
    needs: lint

    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          outputs: type=docker,dest=${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
      -
        name: Transfer to next job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar

  rpi-image-builder:
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 60
    needs: docker-image-builder

    steps:
      -
        name: Get docker image from last job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ runner.temp }}
      -
        name: Load image
        run: |
          docker load --input ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
      -
        name: Build RPi image (${{ env.IMAGE_NAME }}) with container
        run: |
          docker run -a STDOUT -a STDERR --name ${{ env.IMAGE_NAME }} \
            --privileged ${{ env.IMAGE_NAME }}:${{ github.sha }}
      -
        name: Copy output image
        run: |
          mkdir output
          docker cp ${{ env.IMAGE_NAME }}:/haxinator/pi-gen/deploy/. output/
          ls -al output/
      -
        name: Generate tag
        id: releasetag
        run: |
          RELEASE_TAG=$(date -u +"%F_%H-%M-%S-%3N")
          echo "RELEASE_TAG=${RELEASE_TAG}" >> ${GITHUB_ENV}
      -
        name: Release images as prerelease for ${{ github.sha }}
        id: release_images
        uses: softprops/action-gh-release@v2
        with:
          files: output/*
          body: Images from ${{ github.ref_name }} - commit ${{ github.sha }}
          draft: false
          name: ${{ github.sha }}
          prerelease: ${{ github.ref_type == 'tag' }}
          tag_name: ${{ steps.releasetag.outputs.RELEASE_TAG }}
      -
        name: Display URL
        run: |
          echo "URL: ${{ steps.release_images.outputs.url }}"
