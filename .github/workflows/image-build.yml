# yamllint disable-line rule:document-start
name: RPi image builder

permissions:
  contents: write
  actions: read

env:
  IMAGE_NAME: haxinator-builder

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - .devcontainer/**
      - .chglog/**
      - .github/dependabot.yml
      - .github/workflows/update-changelog.yml
      - docs/**
      - README.md

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

# TODO:
# - Use super-linter/super-linter
# - Use cache for buildx to speed up builds
# - Check if building on Mac is faster
# - Try checkov
# - Get and upload SARIF
# - Build docs in parallel with building the image to give in assets
# - Create sha256sum of the files if not already created

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      -
        name: Git Checkout
        uses: actions/checkout@v4
      -
        name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          verbose: true
          failure-threshold: error
      -
        name: Shellcheck scripts
        run: |
          SHELL_FILES="$(find -iname '*.sh')"
          shellcheck -S warning -x -a ${SHELL_FILES}

          ## Display everything
          #(shellcheck -x -a ${SHELL_FILES} || true)
      -
        name: Lint markdown files
        continue-on-error: true
        uses: articulate/actions-markdownlint@v1
      -
        name: Lint php files
        run: |
          find . -name "*.php" -exec php -l {} \;
      -
        name: Lint python scripts
        continue-on-error: true
        run: |
          # 1. Install lint tools + SARIF plugins
          pip install --upgrade pip
          pip install flake8 flake8-sarif pylint pylint-sarif bandit bandit-sarif

          # 2. Install reviewdog (for GitHub annotations)
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh \
            | sh -s -- -b /usr/local/bin

          # 3. Run Flake8 → SARIF
          flake8 . \
            --format=sarif \
            --output-file=flake8-report.sarif

          # 4. Annotate Flake8 issues in the PR/check
          reviewdog \
            -f=sarif \
            -name="flake8" \
            -reporter=github-pr-check \
            < flake8-report.sarif

          # 5. Run Bandit → SARIF (recursive, skips your usual excludes)
          bandit -r . \
            --format=sarif \
            --output-file=bandit-report.sarif

          # 6. Annotate in the GitHub check
          reviewdog \
            -f=sarif \
            -name="bandit" \
            -reporter=github-pr-check \
            < bandit-report.sarif

          # 7. Run Pylint → SARIF
          pylint **/*.py \
            --load-plugins=pylint_sarif \
            --output-format=sarif \
            > pylint-report.sarif

          # 8. Annotate Pylint issues in the PR/check
          reviewdog \
            -f=sarif \
            -name="pylint" \
            -reporter=github-pr-check \
            < pylint-report.sarif

          # 9. Upload SARIFs to Code Scanning
          -
            name: Upload Flake8 SARIF report
            uses: github/codeql-action/upload-sarif@v3
            continue-on-error: true
            with:
              sarif_file: flake8-report.sarif
          -
            name: Upload pylint SARIF report
            uses: github/codeql-action/upload-sarif@v3
            continue-on-error: true
            with:
              sarif_file: pylint-report.sarif
          -
            name: Upload Bandit SARIF report
            uses: github/codeql-action/upload-sarif@v3
            continue-on-error: true
            with:
              sarif_file: bandit-report.sarif

  docker-image-builder:
    runs-on: ubuntu-24.04-arm
    needs: lint

    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          outputs: type=docker,dest=${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
      -
        name: Transfer to next job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar

  rpi-image-builder:
    runs-on: ubuntu-24.04-arm
    needs: docker-image-builder

    steps:
      -
        name: Get docker image from last job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ runner.temp }}
      -
        name: Load image
        run: |
          docker load --input ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
      -
        name: Build RPi image (${{ env.IMAGE_NAME }}) with container
        run: |
          docker run -a STDOUT -a STDERR --name ${{ env.IMAGE_NAME }} \
            --privileged ${{ env.IMAGE_NAME }}:${{ github.sha }}
      -
        name: Copy output image
        run: |
          mkdir output
          docker cp ${{ env.IMAGE_NAME }}:/haxinator/pi-gen/deploy/. output/
          ls -al output/
      -
        name: Generate tag
        id: releasetag
        run: |
          RELEASE_TAG=$(date -u +"%F_%H-%M-%S-%3N")
          echo "RELEASE_TAG=${RELEASE_TAG}" >> ${GITHUB_ENV}
      -
        name: Release images as prerelease for ${{ github.sha }}
        id: release_images
        uses: softprops/action-gh-release@v2
        with:
          files: output/*
          body: Images from ${{ github.ref_name }} - commit ${{ github.sha }}
          draft: false
          name: ${{ github.sha }}
          prerelease: ${{ github.ref_type == 'tag' }}
          tag_name: ${{ steps.releasetag.outputs.RELEASE_TAG }}
      -
        name: Display URL
        run: |
          echo "URL: ${{ steps.release_images.outputs.url }}"
